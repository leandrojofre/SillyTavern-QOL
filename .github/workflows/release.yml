
name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - release

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}"

      - name: Determine version bump
        id: determine_version
        run: |
          if [ -z "$(git tag)" ]; then
            current_version="0.0.0"
          else
            current_version=$(git describe --tags $(git rev-list --tags --max-count=1))
          fi
          
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "Current version: $current_version"
      
          if [[ "$(gh pr view ${{ github.event.pull_request.number }} --json labels -q ".labels[].name")" == *"major"* ]]; then
            new_version=$(echo $current_version | awk -F. '{print $1+1 ".0.0"}')
            echo "version=major" >> $GITHUB_OUTPUT
          elif [[ "$(gh pr view ${{ github.event.pull_request.number }} --json labels -q ".labels[].name")" == *"minor"* ]]; then
            new_version=$(echo $current_version | awk -F. '{print $1 "." $2+1 ".0"}')
            echo "version=minor" >> $GITHUB_OUTPUT
          else
            new_version=$(echo $current_version | awk -F. '{print $1 "." $2 "." $3+1}')
            echo "version=patch" >> $GITHUB_OUTPUT
          fi
      
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Get PR details
        id: pr_details
        run: |
          pr=$(gh pr view ${{ github.event.pull_request.number }} --json title,author,body)
          echo "title=$(echo $pr | jq -r .title)" >> $GITHUB_OUTPUT
          echo "user=$(echo $pr | jq -r .author.login)" >> $GITHUB_OUTPUT
          echo "body=$(echo $pr | jq -r .body)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_version.outputs.new_version }}
          release_name: SillyTavern-QOL v${{ steps.determine_version.outputs.new_version }}
          body: |
           ## What's new in this release?
           - **PR Title**:\n\n ${{ steps.pr_details.outputs.title }}
           - **Merged by**:\n\n ${{ steps.pr_details.outputs.user }}
           - **Changes**:\n\n ${{ steps.pr_details.outputs.body }}
          draft: false
          prerelease: false
